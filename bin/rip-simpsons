#!/usr/bin/python3

from dataclasses import dataclass
from typing import List
from xml.etree import ElementTree
import argparse
import os
import os.path as path
import shlex
import subprocess

SERIES = "The Simpsons"
YEAR = "1989"
PRESET = "Devices/Apple 2160p60 4K HEVC Surround"
SUFFIX = "m4v"


@dataclass
class Ripping:
    episode_number: int
    title: int


@dataclass
class RippingPlan:
    season: int
    rippings: List[Ripping]

    def __str__(self) -> str:
        lines = [
            "Title {title:02} => S{season:02}E{episode:02}".format(
                season=self.season, title=rip.title, episode=rip.episode_number
            )
            for rip in self.rippings
        ]
        return "\n".join(lines)


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--device", help="DVD device", required=True)
    ap.add_argument(
        "--overwrite", help="overwrite all existing files", action="store_true"
    )
    ap.add_argument("--season", help="season number", type=int, required=True)
    ap.add_argument(
        "--episode-start",
        metavar="N",
        help="episode number of first DVD title",
        type=int,
        required=True,
    )
    ap.add_argument(
        "--titles", metavar="N", help="number of titles", type=int, required=False
    )
    ap.add_argument(
        "--skip-titles", metavar="N", help="number of titles to skip", type=int, required=False
    )
    ap.add_argument("--emby-path", help="path to Emby volume", required=True)
    ap.add_argument(
        "--commentary", metavar="TRACK", help="rip commentary track", type=int
    )

    args = ap.parse_args()

    if args.titles is None:
        # What Handbrake calls 'titles', lsdvd calls 'tracks'.  An lsdvd
        # 'title' roughly corresponds to a disc.
        xml = subprocess.check_output(["lsdvd", args.device, "-Ox"])
        root = ElementTree.fromstring(xml)
        titles = []
        tracks = [
            # lsdvd track "ix" is 1-based, like Handbrake title indices
            {
                "ix": int(track.find("ix").text),
                "length": float(track.find("length").text),
            }
            for track in root.iter("track")
        ]

        for track in tracks:
            MIN_EPISODE_LENGTH = 1140.0
            if track["length"] < MIN_EPISODE_LENGTH:
                break
            titles.append(track["ix"])
    else:
        titles = [idx for idx in range(1, args.titles + 1)]

    rippings = [
            Ripping(
                # Title is 1-based
                episode_number=args.episode_start + (title - 1),
                title=title,
            )
            for title in titles
        ]
    if args.skip_titles is not None:
        rippings = rippings[args.skip_titles:]

    ripping_plan = RippingPlan(
        season=args.season,
        rippings=rippings,
    )

    print("Ripping plan:\n{}".format(ripping_plan))
    input("Press RETURN to continue. ")

    for item in ripping_plan.rippings:
        output_dir = path.join(
            args.emby_path,
            "{} ({})".format(SERIES, YEAR),
            "Season {}".format(args.season),
        )
        try:
            os.mkdir(output_dir)
        except FileExistsError:
            pass
        filename = "{} S{:02}E{:02}.{}".format(
            SERIES, ripping_plan.season, item.episode_number, SUFFIX
        )
        output_path = path.join(output_dir, filename)
        if not args.overwrite and path.exists(output_path):
            response = input(
                "{} exists.  Type OVERWRITE to overwrite it, or anything else to skip. ".format(
                    output_path
                )
            )
            if response != "OVERWRITE":
                continue

        handbrake_args: List[str] = [
            "HandBrakeCLI",
            "--input",
            args.device,
            "--title",
            str(item.title),
            "--crop",
            "0:0:8:6",
            "--preset",
            PRESET,
            "--output",
            output_path,
        ]
        if args.commentary is not None:
            handbrake_args += [
                "--audio",
                "1,{}".format(args.commentary),
                "--aname",
                "English,Commentary",
            ]

        print("Running:\n{}".format(shlex.join(handbrake_args)))
        subprocess.run(handbrake_args)


if __name__ == "__main__":
    main()
